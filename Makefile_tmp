CLANG      := clang
LLC        := llc
BPFOOL     := /usr/local/sbin/bpftool
LIBBPF_DIR := /home/eungga/libbpf/src
LKSRC      := /home/eungga/linux-6.15.6
INCLUDES   := -I$(LIBBPF_DIR) \
              -I$(LKSRC)/usr/include \
              -I$(LKSRC)/include/linux \
              -I$(LKSRC)/tools/include/uapi \
              -I$(LIBBPF_DIR)/include \
              -I$(LIBBPF_DIR)/include/uapi

CFLAGS     := -O2 -g -target bpf $(INCLUDES)
CC         := gcc

XDP_SRC      := arena_xdp_kern.c
SYSCALL_SRC  := arena_syscall_kern.c
LOADER_SRC   := loader.c

XDP_LL       := $(XDP_SRC:.c=.ll)
SYSCALL_LL   := $(SYSCALL_SRC:.c=.ll)
XDP_OBJ      := $(XDP_SRC:.c=.o)
SYSCALL_OBJ  := $(SYSCALL_SRC:.c=.o)
XDP_SKEL     := arena_xdp_kern.skel.h
SYSCALL_SKEL := arena_syscall_kern.skel.h
LOADER_BIN   := loader

.PHONY: all clean
all: $(LOADER_BIN)

# 1. .c -> .ll
%.ll: %.c
    $(CLANG) $(CFLAGS) -S -emit-llvm $< -o $@

# 2. .ll -> .o
%.o: %.ll
    $(LLC) -march=bpf -filetype=obj -o $@ $<

# 3. .o -> .skel.h
%.skel.h: %.o
    $(BPFOOL) gen skeleton $< > $@

# 4. loader 컴파일 (헤더가 존재할 때만)
$(LOADER_BIN): $(LOADER_SRC) $(XDP_SKEL) $(SYSCALL_SKEL)
    $(CC) -O2 -g $(LOADER_SRC) -o $@ -L$(LIBBPF_DIR) -lbpf

clean:
	rm -f *.ll *.o *.skel.h $(LOADER_BIN)

